Longest Subarray with given Sum K(Positives)

Link = [Longest Subarray with given Sum K(Positives)](https://www.naukri.com/code360/problems/longest-subarray-with-sum-k_6682399?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION)

simple approach :
Go through every subarray and check for the sum value of each subarray. and calculate the maximum out of it.
time compleexiy O(N^3).

Better approach:
Use two pointer for the same:
start with i=0 and nested j=i and keep calculating sum in between. 

code::

int getLongestSubarray(vector<int>& a, long long k) {
    int n = a.size(); // size of the array.

    int len = 0;
    for (int i = 0; i < n; i++) { // starting index
        long long s = 0; // Sum variable
        for (int j = i; j < n; j++) { // ending index
            // add the current element to
            // the subarray a[i...j-1]:
            s += a[j];

            if (s == k)
                len = max(len, j - i + 1);
        }
    }
    return len;
}
time comnplexity: O(N^2)


Better approach 2:

use prefix sum and calculate and save cummulative sum in hashmap. and on while check that if at any point of time (sum-k) then there must be a sum = k was there before this value. hence you can save the length by calculating (R-L+1)

int getLongestSubarray(vector<int>& a, long long k) {
    int n = a.size(); // size of the array.

    map<long long, int> preSumMap;
    long long sum = 0;
    int maxLen = 0;
    for (int i = 0; i < n; i++) {
        //calculate the prefix sum till index i:
        sum += a[i];

        // if the sum = k, update the maxLen:
        if (sum == k) {
            maxLen = max(maxLen, i + 1);
        }

        // calculate the sum of remaining part i.e. x-k:
        long long rem = sum - k;

        //Calculate the length and update maxLen:
        if (preSumMap.find(rem) != preSumMap.end()) {
            int len = i - preSumMap[rem];
            maxLen = max(maxLen, len);
        }

        //Finally, update the map checking the conditions:
        if (preSumMap.find(sum) == preSumMap.end()) {
            preSumMap[sum] = i;
        }
    }

    return maxLen;
}


time complexity : O(N)







Optimal approach :
Most optimal approach comes with the intuition that whenever the prefix sum goes above K we don't need it we can reduce it.
This value only works in case of positive or zeroes.

int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    long long sum=a[0];
    int l=0,r=0;
    int n=a.size();
    int maxlen=0;
    while(r<n){
        while(l<=r && sum>k){
            sum-=a[l];
            l++;}
        if(sum==k){maxlen=max(maxlen,r-l+1);}
        r++;
        if(r<n){sum+=a[r];}
       
    }
    return maxlen;
}
