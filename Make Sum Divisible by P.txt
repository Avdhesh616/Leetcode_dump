Brute force approach :

int minSubarray(vector<int>& nums, int p) {
        long long sum=0;
        int mincnt = INT_MAX;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        cout<<sum<<endl;
        if(sum%p==0){return 0;}
        for(int i=0;i<nums.size();i++){
            int minsum=0;
            int cnt=0;
            for(int j=i;j<nums.size();j++){
                minsum+=nums[j];
                int a = sum-minsum;
                cout<<sum<<"-"<<minsum<<"="<<a<<endl;
                cnt++;
                if(a!=0 && a%p==0){
                    mincnt = min(mincnt,cnt);
                    cout<<"cnt= "<<cnt<<" : mincnt="<<mincnt<<endl;
                }
            }
        }
        if(mincnt==INT_MAX){mincnt=-1;}
        return mincnt;
    }



optimal approach:
Prefix sum approach


int minSubarray(vector<int>& nums, int p) {
       long sum=0;
        int n=nums.size();
        for(auto i:nums){
            sum+=i;
        }
        int t= sum%p;
        if(t==0){return 0;}
        int mini = n;
     
        map<int,int> mp;
        mp[0]=-1;
        long presum = 0;
        for(int i=0;i<nums.size();i++){
            presum=(presum+nums[i])%p;
            int needed = (presum-t+p)%p;
            if(mp.find(needed)!=mp.end()){
                mini = min(mini,i-mp[needed]);
            }
            mp[presum] = i;
        }
        if(mini == nums.size()){return -1;}
        return mini;
    }

