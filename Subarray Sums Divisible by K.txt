Subarray Sums Divisible by K


brute force::
int subarraysDivByK(vector<int>& nums, int k) {
        int cnt=0;
        for(int i=0;i<nums.size();i++){
            for(int j=i;j<nums.size();j++){
                int sum=0;
                for(int l=i;l<=j;l++){
                    sum+=nums[l];
                }
                if(sum%k==0){cnt++;}
            }
        }      
        return cnt;
}







Optimised solution:

Using Prefix sum

int minSubarray(vector<int>& nums, int p) {
       long sum=0;
        int n=nums.size();
        for(auto i:nums){
            sum+=i;
        }
        int t= sum%p;
        if(t==0){return 0;}
        int mini = n;
     
        map<int,int> mp;
        mp[0]=-1;
        long presum = 0;
        for(int i=0;i<nums.size();i++){
            presum=(presum+nums[i])%p;
            int needed = (presum-t+p)%p;
            if(mp.find(needed)!=mp.end()){
                mini = min(mini,i-mp[needed]);
            }
            mp[presum] = i;
        }
        if(mini == nums.size()){return -1;}
        return mini;
    }



